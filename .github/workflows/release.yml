name: 🚀 Release Workflow

on:
  # Trigger on push to main branch (after PR merge)
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.gitignore'
  
  # Trigger on release branch creation
  create:
    branches:
      - 'release/**'
  
  # Manual trigger for releases
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
        default: 'patch'
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'

jobs:
  # Test before any release activities
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm run test:coverage

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Determine if this should trigger a release
  should_release:
    name: 🤔 Should Release?
    runs-on: ubuntu-latest
    needs: test
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_type: ${{ steps.check.outputs.version_type }}
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check release conditions
        id: check
        run: |
          # Check if this is a manual trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_type=${{ inputs.version_type }}" >> $GITHUB_OUTPUT
            echo "Manual release triggered"
            exit 0
          fi
          
          # Check if this is a release branch
          if [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_type=minor" >> $GITHUB_OUTPUT
            echo "Release branch detected"
            exit 0
          fi
          
          # Check commit messages for release indicators
          RECENT_COMMITS=$(git log --oneline -10 --grep="feat\|fix\|BREAKING" || echo "")
          if [ -n "$RECENT_COMMITS" ]; then
            # Determine version type based on commits
            if echo "$RECENT_COMMITS" | grep -q "BREAKING"; then
              echo "version_type=major" >> $GITHUB_OUTPUT
            elif echo "$RECENT_COMMITS" | grep -q "feat"; then
              echo "version_type=minor" >> $GITHUB_OUTPUT
            else
              echo "version_type=patch" >> $GITHUB_OUTPUT
            fi
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Release commits detected"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No release-worthy changes detected"
          fi
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  # Create release
  release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [test, should_release]
    if: needs.should_release.outputs.should_release == 'true' && !inputs.dry_run
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏷️ Generate version
        id: version
        run: |
          chmod +x scripts/build.js
          
          # Get version info before bump
          OLD_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          
          # Perform version bump
          npm run build:${{ needs.should_release.outputs.version_type }}
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "Version bumped: $OLD_VERSION → $NEW_VERSION"

      - name: 🏗️ Build release artifacts
        run: |
          # Create release package
          mkdir -p release
          cp -r src release/
          cp package.json package-lock.json release/
          cp README.md CHANGELOG.md LICENSE release/ 2>/dev/null || true
          
          # Create tarball
          cd release
          tar -czf ../horse-racing-text-game-${{ steps.version.outputs.new_version }}.tar.gz .
          cd ..

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Simple changelog generation from git log
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD 2>/dev/null || echo "* Initial release")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: "🐎 Horse Racing Text Game v${{ steps.version.outputs.new_version }}"
          body: |
            ## 🎉 Release v${{ steps.version.outputs.new_version }}
            
            ### 📋 Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🚀 Installation
            ```bash
            # Download and extract
            wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.new_version }}/horse-racing-text-game-${{ steps.version.outputs.new_version }}.tar.gz
            tar -xzf horse-racing-text-game-${{ steps.version.outputs.new_version }}.tar.gz
            cd horse-racing-text-game-${{ steps.version.outputs.new_version }}
            
            # Install and run
            npm install --production
            npm start
            ```
            
            ### 📊 Version Info
            - **Previous version**: v${{ steps.version.outputs.old_version }}
            - **Release type**: ${{ needs.should_release.outputs.version_type }}
            - **Build date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - **Commit**: ${{ github.sha }}
            
            🤖 *Generated with [Claude Code](https://claude.ai/code)*
          draft: false
          prerelease: false

      - name: 📎 Upload release tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./horse-racing-text-game-${{ steps.version.outputs.new_version }}.tar.gz
          asset_name: horse-racing-text-game-${{ steps.version.outputs.new_version }}.tar.gz
          asset_content_type: application/gzip

  # Clean up old branches after successful release
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && needs.release.outputs.new_version
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🧹 Cleanup old branches
        run: |
          # Only run cleanup for major/minor releases
          if [[ "${{ needs.should_release.outputs.version_type }}" == "major" ]] || [[ "${{ needs.should_release.outputs.version_type }}" == "minor" ]]; then
            chmod +x scripts/build.js
            npm run branches:cleanup
          else
            echo "Skipping cleanup for patch release"
          fi

  # Dry run job for testing
  dry_run:
    name: 🔍 Dry Run
    runs-on: ubuntu-latest
    needs: [test, should_release]
    if: needs.should_release.outputs.should_release == 'true' && inputs.dry_run
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Simulate release
        run: |
          echo "🔍 DRY RUN MODE - No actual changes will be made"
          echo "Current version: ${{ needs.should_release.outputs.current_version }}"
          echo "Would bump: ${{ needs.should_release.outputs.version_type }}"
          echo "Release conditions met: ${{ needs.should_release.outputs.should_release }}"
          
          # Show what the new version would be
          chmod +x scripts/build.js
          npm run build:info
          
          echo "✅ Dry run completed successfully"

  # Notify on completion
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [release, cleanup]
    if: always() && (needs.release.result == 'success' || needs.release.result == 'skipped')
    steps:
      - name: 📢 Success notification
        if: needs.release.outputs.new_version
        run: |
          echo "🎉 Release v${{ needs.release.outputs.new_version }} completed successfully!"
          echo "📦 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.new_version }}"
          
      - name: 📢 No release notification
        if: "!needs.release.outputs.new_version"
        run: |
          echo "ℹ️ No release created - conditions not met or dry run mode"